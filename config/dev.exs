import Config

# Configure your database
config :wages, Wages.Repo,
  username: "postgres",
  password: "postgres",
  hostname: "localhost",
  database: "wages_dev",
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with esbuild to bundle .js and .css sources.
config :wages, WagesWeb.Endpoint,
  url: [host: "localhost", path: "/"],
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  # http: [ip: {127, 0, 0, 1}, port: 4000],
  http: [ip: {0, 0, 0, 0}, port: System.get_env("PORT") || 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "CyuVC6qZ+FFfgzYlGHfQTPE84s4aRuWRYi5dqRNYokgMSMcz+VKibjCF/f7CHPQD",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :wages, WagesWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/wages_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :wages, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n", level: :debug

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

config :wages, Wages.Broadway,
  name: Wages.Broadway,
  producer: [
    module: {
      BroadwayRabbitMQ.Producer,
      on_failure: :reject_and_requeue_once,
      on_success: :ack,
      buffer_size: 100,
      backoff_min: 0,
      backoff_max: 100,
      queue: "wages-events",
      declare: [durable: true],
      bindings: [{"amq.topic", [routing_key: "wages.*"]}],
      connection: [
        username: "guest",
        password: "guest",
        host: "kubernetes.local",
        port: 31247
      ],
      qos: [
        # See "Back-pressure and `:prefetch_count`" section
        prefetch_count: 16
      ]
    },
    # },
    concurrency: 32
  ],
  processors: [
    default: [
      concurrency: 8,
      min_demand: 1,
      max_demand: 2
      # batch_size: 1,
      # batch_timeout: 1_000,
      # max_demand: 10,
      # min_demand: 1,
      # concurrency: 10,
      # batch_timeout: 1_000,
      # max_batch_size: 100
    ]
  ],
  batchers: [
    coffee_extractor: [
      concurrency: 8,
      batch_size: 1000,
      batch_timeout: 10_000
    ],
    default: []
  ]

# Configure InfluxDB
config :wages, Wages.Influxdb.Connection,
  auth: [
    method: :token,
    token:
      "zeslpCkmVqkkM12SuaQxs1PxeO7i60e5GZQAwsuOGPCbS-8uTFrdJHlyE-CYD1VH8MJkZV6SPsxipAA7s5v84w=="
  ],
  # bucket: "wages",
  database: "wages",
  org: "wages",
  # host: "localhost",
  host: "kubernetes.local",
  port: 8086,
  scheme: "http"
